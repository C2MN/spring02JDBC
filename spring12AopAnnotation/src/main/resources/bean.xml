<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置创建容器时要扫描的包-->
    <context:component-scan base-package="com.srx"></context:component-scan>
    <!--配置spring的ioc，把service对象配置进来 (使用注解@Service("accountService")后该配置可以省略)
    <bean id="accountService" class="com.srx.service.impl.AccountServiceImpl"></bean>-->

    <!--配置Logger类(通知类) (使用注解@Component("logger")
                                  @Aspect//表示当前类是一个切面类 后可以省略该配置)
    <bean id="logger" class="com.srx.utils.Logger"></bean>-->

    <!--配置AOP
    <aop:config>-->
        <!--配置切入点表达式，id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容
                此标签写在aop:aspect标签内部只能当前切面使用
                它还可以写在aop:aspect外面，此时就变成了所有切面可用

        <aop:pointcut id="pt1" expression="execution(* com.srx.service.impl.*.*(..))"/>-->
        <!--配置切面
        <aop:aspect id="logAdvice" ref="logger">-->
            <!--配置前置通知，在切入点方法执行之前执行
            <aop:before method="beforePrintLog" pointcut-ref="pt1"/>-->
            <!--配置后置通知，在切入点方法正常执行之后执行
            <aop:after-returning method="afterReturnPrintLog" pointcut-ref="pt1"/>-->
            <!--配置异常通知，在切入点方法执行产生异常后执行
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"/>-->
            <!--配置最终通知，无论切入点方法是否正常执行它都会在其后执行
            <aop:after method="afterPrintLog" pointcut-ref="pt1"/>-->
            <!--配置环绕通知 详细的注释请看Logger类中
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>-->
    <!--配置spring开启注解AOP的支持-->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

</beans>